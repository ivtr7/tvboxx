# TVBOX Control System - Plano de Desenvolvimento Detalhado

## üìã An√°lise Atual do Sistema

### ‚úÖ Componentes Funcionais
- **Backend API**: Servidor Express.js rodando na porta 3001
- **Frontend React**: Interface Vite rodando na porta 5174
- **WebSocket**: Comunica√ß√£o em tempo real configurada
- **Banco MySQL**: Estrutura de dados implementada
- **Autentica√ß√£o JWT**: Sistema de login funcional

### üîç Rotas Frontend Auditadas
- **App.tsx**: Roteamento principal (admin, device, client/:deviceId)
- **AdminApp.tsx**: Sub-rotas administrativas (dashboard, devices, media, playlists, analytics, campaigns, settings, login)
- **DeviceApp.tsx**: Interface do dispositivo com onboarding
- **ClientApp.tsx**: Dashboard do cliente com valida√ß√£o de deviceId

### üîå APIs Backend Mapeadas
- **Auth**: /api/auth (login, register, me, refresh, logout)
- **Devices**: /api/devices (register, status, info, playlist, events)
- **Content**: /api/content (CRUD completo + upload de arquivos)
- **Playlists**: /api/playlists (CRUD completo + duplica√ß√£o)
- **Campaigns**: /api/campaigns (CRUD + analytics)
- **Analytics**: /api/analytics (overview, devices, playback, export)
- **System**: /api/system (status, logs, audit, settings, maintenance)

## üö® Problemas Identificados

### 1. Dados Mockados/Hardcoded
- **AdminLogin.tsx**: Credenciais de exemplo expostas (admin@oricontrol.com / password)
- **AdminDashboard.tsx**: Refer√™ncias ao Supabase (deve usar MySQL)
- **PlaylistsPage.tsx**: Coment√°rio "Mock data for playlists"
- **AnalyticsPage.tsx**: Coment√°rio "Mock analytics data"
- **CampaignsPage.tsx**: Coment√°rio "Mock data for campaigns"
- **auth.js**: Login hardcoded (admin@oricontrol.com / admin123)

### 2. Inconsist√™ncias de Dados
- **AuthContext**: Interface User com campos diferentes do backend
- **AdminDashboard**: Queries do Supabase em sistema MySQL
- **Credenciais**: Diferen√ßa entre frontend (password) e backend (admin123)

## üéØ Plano de A√ß√£o Priorit√°rio

### FASE 1: Corre√ß√£o de Dados Mockados (ALTA PRIORIDADE)

#### 1.1 Remover Credenciais Hardcoded
- [ ] **AdminLogin.tsx**: Remover texto "Use as credenciais: admin@oricontrol.com / password"
- [ ] **auth.js**: Implementar valida√ß√£o real no banco de dados
- [ ] **Criar tabela users**: Estrutura para usu√°rios administrativos

#### 1.2 Corrigir Interface de Usu√°rio
- [ ] **AuthContext.tsx**: Alinhar interface User com resposta da API
- [ ] **Campos**: id, email, name, role, tenant_id, created_at

#### 1.3 Substituir Dados Mock por APIs Reais
- [ ] **AdminDashboard.tsx**: Remover queries Supabase, implementar chamadas para /api/analytics
- [ ] **PlaylistsPage.tsx**: Conectar com /api/playlists
- [ ] **AnalyticsPage.tsx**: Conectar com /api/analytics
- [ ] **CampaignsPage.tsx**: Conectar com /api/campaigns

### FASE 2: Melhorias de UX/UI (M√âDIA PRIORIDADE)

#### 2.1 Valida√ß√µes e Feedback
- [ ] **Formul√°rios**: Valida√ß√£o client-side em todos os forms
- [ ] **Loading States**: Spinners e skeletons em todas as p√°ginas
- [ ] **Error Handling**: Tratamento de erros padronizado
- [ ] **Toast Notifications**: Feedback consistente para a√ß√µes

#### 2.2 Responsividade
- [ ] **Mobile**: Otimizar interface para dispositivos m√≥veis
- [ ] **Tablet**: Ajustar layouts para tablets
- [ ] **Desktop**: Melhorar aproveitamento de tela grande

### FASE 3: Funcionalidades Avan√ßadas (BAIXA PRIORIDADE)

#### 3.1 Analytics Avan√ßados
- [ ] **Dashboards**: Gr√°ficos interativos com drill-down
- [ ] **Relat√≥rios**: Exporta√ß√£o em PDF/Excel
- [ ] **Alertas**: Notifica√ß√µes autom√°ticas para eventos

#### 3.2 Gest√£o de Conte√∫do
- [ ] **Preview**: Visualiza√ß√£o de m√≠dia antes da publica√ß√£o
- [ ] **Agendamento**: Programa√ß√£o de conte√∫do por hor√°rio
- [ ] **Templates**: Modelos pr√©-definidos de playlists

#### 3.3 Seguran√ßa
- [ ] **2FA**: Autentica√ß√£o de dois fatores
- [ ] **Audit Log**: Log detalhado de a√ß√µes administrativas
- [ ] **Permiss√µes**: Sistema granular de permiss√µes

## üõ†Ô∏è Implementa√ß√£o T√©cnica

### Estrutura do Banco de Dados
```sql
-- Tabela de usu√°rios administrativos
CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  role ENUM('admin', 'super_admin') DEFAULT 'admin',
  tenant_id INT DEFAULT 1,
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Inserir usu√°rio admin padr√£o
INSERT INTO users (email, password_hash, name, role) 
VALUES ('admin@oricontrol.com', '$2a$10$...', 'Administrador', 'admin');
```

### APIs a Implementar
- **GET /api/analytics/dashboard**: Dados consolidados do dashboard
- **GET /api/devices/summary**: Resumo de dispositivos ativos/inativos
- **GET /api/content/stats**: Estat√≠sticas de conte√∫do
- **GET /api/campaigns/performance**: Performance das campanhas

### Componentes a Criar
- **DashboardCard**: Componente reutiliz√°vel para cards de estat√≠sticas
- **DataTable**: Tabela com pagina√ß√£o, filtros e ordena√ß√£o
- **MediaPreview**: Preview de arquivos de m√≠dia
- **ChartContainer**: Container padronizado para gr√°ficos

## üìä M√©tricas de Sucesso

### T√©cnicas
- [ ] 0 dados mockados no c√≥digo
- [ ] 100% das p√°ginas conectadas √†s APIs reais
- [ ] Tempo de carregamento < 2s para todas as p√°ginas
- [ ] 0 erros de console no navegador

### Funcionais
- [ ] Login funcional com usu√°rios reais do banco
- [ ] Dashboard com dados reais e atualizados
- [ ] Gest√£o completa de dispositivos, conte√∫do e campanhas
- [ ] WebSocket funcionando para atualiza√ß√µes em tempo real

### UX
- [ ] Interface responsiva em todos os dispositivos
- [ ] Feedback visual para todas as a√ß√µes do usu√°rio
- [ ] Navega√ß√£o intuitiva e consistente
- [ ] Carregamento progressivo de dados

## üöÄ Cronograma Sugerido

### Semana 1: Corre√ß√µes Cr√≠ticas
- Remover dados mockados
- Implementar autentica√ß√£o real
- Corrigir interfaces de dados

### Semana 2: Conex√£o com APIs
- Conectar todas as p√°ginas √†s APIs reais
- Implementar loading states
- Adicionar tratamento de erros

### Semana 3: Melhorias de UX
- Otimizar responsividade
- Melhorar feedback visual
- Testes de usabilidade

### Semana 4: Funcionalidades Avan√ßadas
- Analytics avan√ßados
- Recursos de gest√£o de conte√∫do
- Otimiza√ß√µes de performance

## üìù Notas de Desenvolvimento

### Padr√µes de C√≥digo
- **TypeScript**: Tipagem estrita em todos os componentes
- **React Query**: Cache e sincroniza√ß√£o de dados
- **Tailwind CSS**: Estiliza√ß√£o consistente
- **ESLint/Prettier**: Formata√ß√£o autom√°tica

### Testes
- **Unit Tests**: Jest + React Testing Library
- **Integration Tests**: Cypress para fluxos cr√≠ticos
- **API Tests**: Postman/Newman para endpoints

### Deploy
- **Frontend**: Vercel ou Netlify
- **Backend**: Railway ou Heroku
- **Database**: PlanetScale ou AWS RDS
- **Storage**: AWS S3 para arquivos de m√≠dia

---

**√öltima atualiza√ß√£o**: Janeiro 2025
**Vers√£o**: 1.0
**Status**: Em desenvolvimento ativo